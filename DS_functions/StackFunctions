#include <iostream>
using namespace std;



// for integers ...........
struct stack
{
    int size;
    int top;
    int elements[100];

};
void push (struct stack *s, int x)
    {
        if(s->top == s->size -1)
        cout<<"stack is full";
        else
        {
            s->elements[++s->top] = x;
        }
        
    }

int pop(struct stack *s)
{
    if(s->top==-1)
    {
        cout<<"stack is empty";
        return 0;
    }
    else
    {
        return s->elements[s->top--];
    }
    
}
int peep(struct stack *s)
{
    if(s->top==-1)
    {
        cout<<"stack is empty";
        return 0;
    }
    else
    {
        return s->elements[s->top];
    }
    
}
int main()
{
    struct stack *s1;
    s1 = new(stack);
    s1->size = 50;
    s1->top = -1;
}




for characters

struct stack
{
    int size;
    int top;
    char elements[50];

};
void push (struct stack *s, char x)
    {
        if(s->top == s->size -1)
        cout<<"stack is full";
        else
        {
            s->elements[++s->top] = x;
        }
        
    }

int pop(struct stack *s)
{
    if(s->top==-1)
    {
        return -1;
    }
    else
    {
       
        return  s->elements[s->top--];
    }
    
}
int peep(struct stack *s)
{
    if(s->top==-1)
    {
        return -1;
    }
    else
    {
        return  s->elements[s->top];
    }

}

int main()
{
        struct stack *s1;
    s1 = new(stack);
    s1->size = 1000;
    s1->top = -1;
}



for coordinates

struct coordinate
{
    int x;
    int y;
};

struct stack
{
    int size =200;
    int top;
    struct coordinate elements[200];
};
void push (struct stack *s, struct coordinate curInSta)
    {
        if(s->top == s->size -1)
        cout<<"stack is full";
        else
        {
            s->top++;
            s->elements[s->top].x = curInSta.x;
            s->elements[s->top].y = curInSta.y;
            
        }
        
    }

struct coordinate pop(struct stack *s)
{
    if(s->top==-1)
    {
        return { -1, -1};
    }
    else
    {   
        return  s->elements[s->top--];
    }
    
}
struct coordinate peep(struct stack *s)
{
      if(s->top==-1)
    {
        return {-1, -1};
    }
    else
    {
        return  s->elements[s->top];
    }

}







for  stringgs 
struct stack
{
    int size = 1000;
    int top;
    string elements[50];

};
void push (struct stack *s, string x)
    {
        if(s->top == s->size -1)
        cout<<"stack is full";
        else
        {
            s->elements[++s->top] = x;
        }
        
    }

string pop(struct stack *s)
{
    if(s->top==-1)
    {
        return "-1";
    }
    else
    {
       
        return  s->elements[s->top--];
    }
    
}
string peep(struct stack *s)
{
    if(s->top==-1)
    {
        return "-1";
    }
    else
    {
        return  s->elements[s->top];
    }

}
string getString(char x) 
{ 
    string s(1, x); 
    return s;    
} 

int main()
{
        struct stack *s1;
    s1 = new(stack);
    s1->top = -1;
}